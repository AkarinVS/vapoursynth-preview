from concurrent.futures import Future
from ctypes             import c_void_p
from fractions          import Fraction
from typing             import Any, Mapping, Optional

# pylint: skip-file

class Format:
    @property
    def name(self) -> str: ...
    @property
    def bytes_per_sample(self) -> int: ...


COMPATBGR32: Format


class VideoFrame:
    @property
    def width(self) -> int: ...
    @property
    def height(self) -> int: ...
    @property
    def format(self) -> Format: ...

    def get_read_ptr(self, plane: int) -> c_void_p: ...
    def get_stride(self, plane: int) -> int: ...

class VideoNode:
    @property
    def width(self) -> int: ...
    @property
    def height(self) -> int: ...
    @property
    def num_frames(self) -> int: ...
    @property
    def fps(self) -> Fraction: ...
    @property
    def format(self) -> Format: ...

    def get_frame(self, frame: int) -> VideoFrame: ...
    def get_frame_async(self, frame: int) -> Future[VideoFrame]: ...
    def set_output(self, i: int, alpha: Optional[VideoNode] = None) -> None: ...


def get_outputs() -> Mapping[int, VideoNode]: ...
def clear_outputs() -> None: ...


class Function:
    def __call__(self, *args: Any, **kwargs: Any) -> VideoNode: ...


class Plugin:
    def __getattr__(self, name: str) -> Function: ...


class Core:
    def version_number(self) -> int: ...
    def __getattr__(self, name: str) -> Plugin: ...


core: Core
